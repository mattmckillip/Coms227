package hw2;

import java.io.FileNotFoundException;

/**
 * @author Matt McKillip
 */
public class BullsAndCowsGame {

    // Instance Variables
    /**
     * String containing all of the letters that have been guessed throughout
     * the game. All lowercase and no duplicates
     */
    private String allGuessedLetters;
    /**
     * String containing the secret word
     */
    private String secretWord;
    /**
     * The length of the secret word
     */
    private int wordLength;
    /**
     * String containing the bulls with place holders
     */
    private String bulls;
    /**
     * The WordList created for the game
     */
    private WordList wordList;
    /**
     * Character to use as a placeholder for the hidden characters when
     * displaying the "bulls".
     */
    public static final char PLACEHOLDER = '*';

    // Constructor
    /**
     * Constructs a new game, using the given WordList as a dictionary, that
     * will use words of the specified size; the game will start with the first
     * word of the given size that is generated by the word list.
     * 
     * @param list
     *            The class that handles the dictionary of five and four letter
     *            words
     * @param size
     *            How many letters the secret word will be
     */
    public BullsAndCowsGame(WordList list, int size)
	    throws FileNotFoundException {
	// initialize variables
	allGuessedLetters = "";
	bulls = "";
	wordLength = size;
	// build word list
	wordList = list;
	// generate secret word using the entered size
	secretWord = list.generate(size);
	// build bulls
	for (int i = 0; i < size; i++) {
	    bulls += PLACEHOLDER;
	}
    }

    /**
     * Constructs a new game, using the given WordList as a dictionary, that
     * will use the size of the given word for the word length; the game will
     * start with firstWord. (The purpose of this constructor is to simplify
     * testing.)
     * 
     * @param WordList
     *            The class that handles the dictionary of five and four letter
     *            words
     * @param firstWord
     *            The first secret word will be for the game
     */
    public BullsAndCowsGame(WordList list, String firstWord)
	    throws FileNotFoundException {
	// initialize variables
	allGuessedLetters = "";
	bulls = "";
	// get secret word
	secretWord = firstWord;
	// get word length from the entered word
	wordLength = firstWord.length();
	// build the word list
	wordList = list;
	// make sure the entered word is in the dictionary
	list.check(firstWord);
	// build bulls
	for (int i = 0; i < firstWord.length(); i++) {
	    bulls += PLACEHOLDER;
	}
    }

    // Methods

    /**
     * Starts a new round of the game, using the next word generated by this
     * game’s WordList.
     */
    public void startNewRound() {
	// generate a new word for the new round using the previous words length
	secretWord = wordList.generate(wordLength);
	// initialize variables
	allGuessedLetters = "";
	bulls = "";
	for (int i = 0; i < secretWord.length(); i++) {
	    bulls += PLACEHOLDER;
	}
    }

    /**
     * Returns true if the current round is over (that is, there are no more
     * hidden letters).
     * 
     * @return Whether or not the game is over
     */
    public boolean isOver() {
	return bulls.equals(secretWord);
    }

    /**
     * Returns the secret word for this round. The returned string is all
     * lowercase.
     * 
     * @return The secret word used in the game
     */
    public String getSecretWord() {
	return secretWord;
    }

    /**
     * Returns a string containing all letters of all guessed words in the
     * current round, without duplicates, in the order they first occurred in
     * the players’ guesses. The returned string is all lowercase.
     * 
     * @return all of the guessed letters from the players
     */
    public String getAllGuessedLetters() {
	return allGuessedLetters;
    }

    /**
     * Returns the string with the bulls revealed in their positions and other
     * letters replaced by PLACEHOLDER. All letters in the returned string are
     * lowercase.
     * 
     * @return The string containing the bulls and PLACEHOLDERS
     */
    public String getBulls() {
	return bulls;
    }

    /**
     * Returns a string containing all guessed letters for the current round
     * that do occur in the secret word but have an occurrence that is still
     * hidden. The returned string is all lowercase, has no duplicates, and the
     * order of the letters is the same as in getAllGuesses().
     * 
     * @return The string containing the cows
     */
    public String getCows() {
	// initialize cows
	String cows = "";
	// check to see if the letter is in the secret word and not already in
	// bulls
	for (int i = 0; i < allGuessedLetters.length(); i++) {
	    for (int j = 0; j < secretWord.length(); j++) {
		if ((allGuessedLetters.charAt(i) == secretWord.charAt(j))
			&& (allGuessedLetters.charAt(i) == bulls.charAt(j))) {
		} else if ((allGuessedLetters.charAt(i) == secretWord.charAt(j))
			&& (allGuessedLetters.charAt(i) != bulls.charAt(j))) {
		    // add the letter to cows
		    cows += allGuessedLetters.charAt(i);
		}
	    }
	}
	return cows;
    }

    /**
     * Returns a string containing all guessed letters for the current round
     * that do not occur in the secret word. The returned string is all
     * lowercase, has no duplicates, and the order of the letters is the same as
     * in getAllGuesses().
     * 
     * @return The string containing the geese
     */
    public String getGeese() {
	// initialize geese
	String geese = "";
	// check if the letter in allGuessedLetters equals a letter in the
	// secret word
	for (int i = 0; i < allGuessedLetters.length(); i++) {
	    for (int j = secretWord.length() - 1; j >= 0; j--) {
		// guessed letter is in the secret word, do nothing
		if (allGuessedLetters.charAt(i) == secretWord.charAt(j)) {
		    j = 0;
		    // guessed letter is not in the secret word. Add character
		    // to geese
		} else if (j == 0) {
		    geese += allGuessedLetters.charAt(i);
		}
	    }
	}
	return geese;
    }

    /**
     * 
     * Processes a player’s guess and returns the appropriate status. This
     * method is not casesensitive.
     * 
     * @param word
     *            The players guess
     * @return The status of the guess
     */
    public Status guess(String word) {
	// setting the variables to initial state
	boolean keepTurn = false;
	boolean win = false;
	word = word.toLowerCase();

	// logical progression of the status of the guess
	// make sure the game isn't over and the guess is the right length and
	// in the dictionary
	if (isOver()) {
	    return Status.OVER;
	} else if (!wordList.check(word)) {
	    return Status.INVALID_WORD;
	} else if (word.length() != wordLength) {
	    return Status.INVALID_WORD;
	    // The guess is valid
	}

	for (int i = 0; i < word.length(); i++) {
	    allGuessedLetters += word;
	    allGuessedLetters = condense(allGuessedLetters);
	    for (int j = secretWord.length() - 1; j >= 0; j--) {
		// if the letter in the guess equals a letter in the secret
		// word and the letters are at the same position and the
		// letter is not already been guessed
		if ((word.charAt(i) == secretWord.charAt(j))
			&& ((i == j) && (word.charAt(i) != bulls.charAt(i)))) {
		    // converting bulls to a char array then changing
		    // the letter at position i
		    char[] bullsCharArray = bulls.toCharArray();
		    bullsCharArray[i] = word.charAt(i);
		    bulls = String.valueOf(bullsCharArray);
		    // when bulls is the same as the secret word the
		    // player wins
		    if (bulls.equals(secretWord)) {
			win = true;
		    } else {
			keepTurn = true;
		    }
		    j = 0;
		}
	    }
	}

	// after the guess has been made
	// determine if the player won, lost their turn, or kept their turn
	if (win) {
	    return Status.WIN;
	} else if (keepTurn) {
	    return Status.KEEP_TURN;
	} else {
	    return Status.LOSE_TURN;
	}
    }

    /**
     * A string is inputed. It is then compressed by taking out all duplicate
     * letters
     * 
     * @param s
     *            word entered to be condensed
     * @return the condensed string
     */
private String condense(String s) {
	String result = "";
	int i = 0;
	while (i < s.length()) {
	    int j = 0;
	    while (s.charAt(i) != s.charAt(j) && (j < i)) {
		j += 1;
	    }
	    if (j == i) {
		result = result + s.charAt(i);
		i += 1;
	    } else {
		i += 1;
	    }
	}
	return result;
    }
}
